{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///webpack/runtime/make namespace object","webpack:///./resources/js/map/map.js"],"names":["countries","JSON","parse","window","mapData","valid_countries","map","country","country_code","am4core","id","console","log","chart","document","querySelector","am4maps","geodata","am4geodata_worldLow","projection","worldSeries","series","push","exclude","concat","useGeodata","worldPolygonTemplate","mapPolygons","template","nonScalingStroke","stroke","activeSeries","include","data","activePolygonTemplate","tooltipText","fill","colors","getIndex","propertyFields","url","hs","states","create","properties"],"mappings":";;UAAA;UACA;;;;;WCDA;WACA;WACA;WACA,sDAAsD,kBAAkB;WACxE;WACA,+CAA+C,cAAc;WAC7D,E;;;;;;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AAEA,IAAIA,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWC,MAAM,CAACC,OAAlB,CAAhB;AAEA,IAAIC,eAAe,GAAGL,SAAS,CAACM,GAAV,CAAc,UAACC,OAAD;AAAA,SAAc;AAC9C,UAAMA,OAAO,CAACC,YADgC;AAE9C,YAAQC,uJAAA,CAAc,OAAd,CAFsC;AAG9C,gCAAqBF,OAAO,CAACG,EAA7B;AAH8C,GAAd;AAAA,CAAd,CAAtB;AAMAC,OAAO,CAACC,GAAR,CAAYZ,SAAZ,E,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIa,KAAK,GAAGJ,uJAAA,CAAeK,QAAQ,CAACC,aAAT,CAAuB,+CAAvB,CAAf,EAAwFC,uJAAxF,CAAZ,C,CAEA;;AACAH,KAAK,CAACI,OAAN,GAAgBC,mKAAhB,C,CAEA;;AACAL,KAAK,CAACM,UAAN,GAAmB,IAAIH,uJAAJ,EAAnB,C,CAEA;;AACA,IAAII,WAAW,GAAGP,KAAK,CAACQ,MAAN,CAAaC,IAAb,CAAkB,IAAIN,uJAAJ,EAAlB,CAAlB;AACAI,WAAW,CAACG,OAAZ,GAAsB,CAAC,IAAD,EAAOC,MAAP,CAAcnB,eAAe,CAACC,GAAhB,CAAoB,UAAAC,OAAO;AAAA,SAAIA,OAAO,CAACG,EAAZ;AAAA,CAA3B,CAAd,CAAtB;AACAU,WAAW,CAACK,UAAZ,GAAyB,IAAzB;AAGA,IAAIC,oBAAoB,GAAGN,WAAW,CAACO,WAAZ,CAAwBC,QAAnD;AACAF,oBAAoB,CAACG,gBAArB,GAAwC,IAAxC;AAEAT,WAAW,CAACO,WAAZ,CAAwBC,QAAxB,CAAiCE,MAAjC,GAA0CrB,uJAAA,CAAc,SAAd,CAA1C,C,CAEA;;AACA,IAAIsB,YAAY,GAAGlB,KAAK,CAACQ,MAAN,CAAaC,IAAb,CAAkB,IAAIN,uJAAJ,EAAlB,CAAnB;AACAe,YAAY,CAACC,OAAb,GAAuB3B,eAAe,CAACC,GAAhB,CAAoB,UAAAC,OAAO;AAAA,SAAIA,OAAO,CAACG,EAAZ;AAAA,CAA3B,CAAvB;AACAqB,YAAY,CAACN,UAAb,GAA0B,IAA1B,C,CAEA;;AACAM,YAAY,CAACE,IAAb,GAAoB5B,eAApB;AAEA,IAAI6B,qBAAqB,GAAGH,YAAY,CAACJ,WAAb,CAAyBC,QAArD;AACAM,qBAAqB,CAACC,WAAtB,GAAoC,QAApC;AACAD,qBAAqB,CAACE,IAAtB,GAA6BvB,KAAK,CAACwB,MAAN,CAAaC,QAAb,CAAsB,CAAtB,CAA7B;AACAJ,qBAAqB,CAACL,gBAAtB,GAAyC,IAAzC;AAEAK,qBAAqB,CAACK,cAAtB,CAAqCH,IAArC,GAA4C,MAA5C;AACAF,qBAAqB,CAACK,cAAtB,CAAqCC,GAArC,GAA2C,KAA3C,C,CAEA;;AACA,IAAIC,EAAE,GAAGP,qBAAqB,CAACQ,MAAtB,CAA6BC,MAA7B,CAAoC,OAApC,CAAT;AACAF,EAAE,CAACG,UAAH,CAAcR,IAAd,GAAqB3B,uJAAA,CAAc,SAAd,CAArB,C","file":"/js/map.js","sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","\r\nimport * as am4core from \"@amcharts/amcharts4/core\";\r\nimport * as am4maps from \"@amcharts/amcharts4/maps\";\r\nimport am4geodata_worldLow from \"@amcharts/amcharts4-geodata/worldLow\";\r\nimport am4geodata_usaLow from \"@amcharts/amcharts4-geodata/usaLow\";\r\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\r\n\r\nlet countries = JSON.parse(window.mapData);\r\n\r\nlet valid_countries = countries.map((country) => ({\r\n    'id': country.country_code,\r\n    'fill': am4core.color('black'),\r\n    'url': `/countries/${country.id}`,\r\n}))\r\n\r\nconsole.log(countries)\r\n\r\n// let valid_countries = [{\r\n//     'id': 'US',\r\n//     'fill': am4core.color('black'),\r\n//     'url': 'http://google.com'\r\n// }, {\r\n//     'id': 'FR',\r\n//     'fill': am4core.color('black'),\r\n//     'url': 'http://google.com'\r\n// }];\r\n\r\nlet chart = am4core.create(document.querySelector(\".main__home__section.main__home__section__map\"), am4maps.MapChart);\r\n\r\n// Set map definition\r\nchart.geodata = am4geodata_worldLow;\r\n\r\n// Set projection\r\nchart.projection = new am4maps.projections.Miller();\r\n\r\n// Series for World map - inactive countrie\r\nlet worldSeries = chart.series.push(new am4maps.MapPolygonSeries());\r\nworldSeries.exclude = [\"AQ\"].concat(valid_countries.map(country => country.id));\r\nworldSeries.useGeodata = true;\r\n\r\n\r\nlet worldPolygonTemplate = worldSeries.mapPolygons.template;\r\nworldPolygonTemplate.nonScalingStroke = true;\r\n\r\nworldSeries.mapPolygons.template.stroke = am4core.color('#D9D9D9');\r\n\r\n// active countries\r\nlet activeSeries = chart.series.push(new am4maps.MapPolygonSeries());\r\nactiveSeries.include = valid_countries.map(country => country.id);\r\nactiveSeries.useGeodata = true;\r\n\r\n//pre-filling valid countries\r\nactiveSeries.data = valid_countries;\r\n\r\nlet activePolygonTemplate = activeSeries.mapPolygons.template;\r\nactivePolygonTemplate.tooltipText = \"{name}\";\r\nactivePolygonTemplate.fill = chart.colors.getIndex(0);\r\nactivePolygonTemplate.nonScalingStroke = true;\r\n\r\nactivePolygonTemplate.propertyFields.fill = 'fill';\r\nactivePolygonTemplate.propertyFields.url = 'url';\r\n\r\n// Hover state\r\nlet hs = activePolygonTemplate.states.create(\"hover\");\r\nhs.properties.fill = am4core.color(\"#367B25\");"],"sourceRoot":""}